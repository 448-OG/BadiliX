import { useWallet } from '@solana/wallet-adapter-react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';
import { ReactNode, useEffect, useState } from 'react';
import bs58 from 'bs58';

import { Link } from 'react-router-dom';

interface CreatePoapProps {
  publicKey: PublicKey | null;
  signMessage: any;
}

interface ExistingPoapProps {
  publicKey: PublicKey;
  signMessage: any;
}

export function AppLayout({ children }: { children: ReactNode }) {
  const { publicKey, signMessage } = useWallet();

  useEffect(() => {

  }, [publicKey]);

  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          padding: '6px 12px',
        }}
      >
        <div>

          <h2>POAP - BadiliX</h2>

        </div>
        <div>
          <WalletMultiButton />
        </div>
      </div>
      <div style={{ flexGrow: 1, padding: '6px' }}>
        <CreatePoap publicKey={publicKey} signMessage={signMessage} />
      </div>
      <footer
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          padding: '6px 10px',
        }}
      >
        <aside>
          <p>
            Generated by{' '}
            <a
              href="https://github.com/solana-developers/create-solana-dapp"
              target="_blank"
              rel="noopener noreferrer"
            >
              create-solana-dapp
            </a>
          </p>
        </aside>
      </footer>
    </div>
  );
}


const CreatePoap = ({ publicKey, signMessage }: CreatePoapProps) => {
  return (

    <div>
      {
        publicKey ? (
          <div id='content'>

            <PoapForm publicKey={publicKey} signMessage={signMessage} />
          </div >
        ) : (
          <p>Not connected</p>
        )}
    </div>
  );
}

const PoapForm = ({ publicKey, signMessage }: ExistingPoapProps) => {
  const [mintName, setMintName] = useState<string>("");
  const [mintSymbol, setMintSymbol] = useState<string>("");
  const [mintUri, setMintUri] = useState<string>("");
  const [mintAboutUs, setAboutUs] = useState<string>("");

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();


    try {

      const message = Buffer.from(mintName, "utf-8");

      const signature = await signMessage(message);
      const base58Signed = bs58.encode(signature);

      console.log("SIGNED", base58Signed, publicKey.toString);

      const payload = {
        upgradeAuthority: publicKey.toString(),
        mintName,
        signature: base58Signed,
        name: mintName,
        symbol: mintSymbol,
        uri: mintUri,
        aboutUs: mintAboutUs,
      };

      const response = await fetch('http://localhost:8080/poap', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      console.log("RESPONSE", response);


      const replaceNode = document.getElementById("content");

      response.text().then(bodyText => {
        if (response.status === 500 && replaceNode) {
          replaceNode.textContent = bodyText;
        }

        if (response.status === 200 && replaceNode) {

          const link = document.createElement("a");
          link.href = bodyText;
          link.textContent = "View Transaction";

          replaceNode.innerHTML = "";
          replaceNode.appendChild(link);
        }

      }).catch(err => {

        if (replaceNode) {
          replaceNode.textContent = "Error: " + response.status + " - " + response.statusText + " (could not read body)";
        }

      });




    } catch (error) {
      console.error("Message signing error:", error);
    }
  }

  return (
    <form className='frow direction-column centered' onSubmit={handleSubmit}>
      <div id='poap-form' className="frow direction-column col-xs-1-2">
        <div className='frow p-10 col-xs-1-2 input-section'>
          <label htmlFor="mintName">What is the name of your event?</label>
          <input type="text" id='mintName' value={mintName} onChange={(e) => setMintName(e.target.value)} />
        </div>

        <div className='frow p-10 col-xs-1-2 input-section'>
          <label htmlFor="mintSymbol">A Symbol To Identify the Mint</label>
          <input type="text" id='mintName' value={mintSymbol} onChange={(e) => setMintSymbol(e.target.value)} />
        </div>

        <div className='frow p-10 col-xs-1-2 input-section'>
          <label htmlFor="mintUri">A URI to locate your mint information</label>
          <input type="text" id='mintName' value={mintUri} onChange={(e) => setMintUri(e.target.value)} />
        </div>

        <div className='frow p-10 col-xs-1-2 input-section'> <label htmlFor="mintAboutUs">Short Info About your event?</label>
          <input type="text" id='mintAboutUs' value={mintAboutUs} onChange={(e) => setAboutUs(e.target.value)} />

        </div>
        <div className="frow p-10 col-xs-1-8">
          <button type="submit">Submit</button>
        </div>
      </div>

    </form>
  )
}
